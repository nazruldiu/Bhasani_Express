namespace _Ext {
    @Serenity.Decorators.registerClass([Serenity.IGetEditValue, Serenity.ISetEditValue, Serenity.IReadOnly])
    @Serenity.Decorators.editor()
    @Serenity.Decorators.element('<input type="text"/>')
    export class AutoGeneratedCodeEditor extends Serenity.Widget<AutoGeneratedCodeEditorOptions> implements Serenity.IGetEditValue, Serenity.ISetEditValue {
        public getEditValue(property, target) { target[property.name] = this.value; }
        public setEditValue(source, property) { this.value = source[property.name]; }
        //public _Configuration: BMS_Scheduler.Setup.CodeGenerationConfigRow = {};
        private editorOption;
        constructor(container: JQuery, options: AutoGeneratedCodeEditorOptions) {
            super(container, options);
            this.options = options;
            this.editorOption = options;
            //if (!this.options.PrefixLength)
            //    this.options.PrefixLength = 1;
            //if (!this.options.SuffixLength)
            //    this.options.SuffixLength = 4;



            //setTimeout(() => {
            //    //this.element.addClass('readonly');
            //    //this.element.attr("readonly", "readonly");
            //    let prefix = this.Repeat('X', this.options.PrefixLength);
            //    let suffix = this.Repeat('X', this.options.SuffixLength);
            //    this.element.attr("placeholder", `${prefix}-${suffix}`);
            //})

        }

        private Repeat(str: string, repeatCount?: number) {
            var array = [];
            for (var i = 0; i < repeatCount;)
                array[i++] = str;
            return array.join('');
        }

        public get value(): string {
            //this.element.attr('title', this.getMessage(this._Configuration.CodeLenth, this._Configuration.IsAutoGenerated));
            this.element.tooltip();
            return this.element.val();
        }

        public set value(val: string) {
            if (val) {
                val = val.replace(' ', '');
                this.element.val(val);
            } else {
                this.element.val(val);

                //this.element.attr('data-toggle', 'tooltip');
                //this.element.attr('data-placement', 'right');
                this.element.tooltip({});
            }

            //BMS_Scheduler.Setup.CodeGenerationConfigService.GetConfiguration({ ConfigurationFor: this.editorOption.CodeFor }, r => {
            //    if (r.CodeConfiguration) {
            //        this._Configuration = r.CodeConfiguration;

            //        if (r.CodeConfiguration.CodeLenth && r.CodeConfiguration.IsAutoGenerated) {
            //            let placeHolder = this.Repeat('X', r.CodeConfiguration.CodeLenth);
            //            this.element.attr("placeholder", `${placeHolder}`);
            //        }
            //    }
            //    let isNew = val ? false : true;
            //    let message = this.getMessage(r.CodeConfiguration.CodeLenth, r.CodeConfiguration.IsAutoGenerated, isNew);
            //    this.element.attr('title', message);

            //    if (!r.CodeConfiguration.IsAutoGenerated) {
            //        this.element.removeClass('readonly');
            //        this.element.removeAttr("readonly");
            //    }

            //    if (this.element.val()) {
            //        this.element.addClass('readonly');
            //        this.element.attr("readonly", "readonly");
            //    }



            //    //if (r && r.CodeConfiguration.IsAutoGenerated) {
            //    //    this.element.addClass('readonly');
            //    //    this.element.attr("readonly", "readonly");
            //    //}
            //    //else {
            //    //    this.element.removeClass('readonly');
            //    //    this.element.removeAttr("readonly");
            //    //}
            //})

        }

        private getMessage(codeLength: number, isAutoGenerated: boolean, isNew: boolean = true) {
            let message = '';

            if (this.options.Message)
                message = this.options.Message;
            else {
                if (isAutoGenerated)
                    message = isNew ? `${codeLength} Digit code will be added automatically` : `${codeLength} Digit auto generated code.`;
                else
                    message = ``;
            }
            return message;
        }

        //get_readOnly(): boolean {
        //    return this.element.hasClass('readonly');
        //}

        set_readOnly(value: boolean): void {
            value = true;
            if (value == true) {
                this.element.addClass('readonly');
                this.element.attr("readonly", "readonly");
            } else {
                this.element.removeClass('readonly');
                this.element.removeAttr("readonly");
            }
        }
    }

    export interface AutoGeneratedCodeEditorOptions {
        Message?: string;
        //PrefixLength?: number;
        //SuffixLength?: number;
        CodeFor: BMS_Scheduler.Common.AutoGeneratedCodeConfiguration
    }

}